Das Builder Pattern


Zweck:

- Das Builder Pattern erlaubt es uns, ein Objekt Stück für Stück aufzubauen und dann

am Ende das fertige Ergebnis zurückzugeben

- Derselbe Konstruktionsporzess kann so verschiedene Repräsentationen erzeugen

Anwendunsfall :

- Wenn die Instanziierung sehr schwer und komplex ist, weil sich das Objekt beispielsweiße aus mehreren Objekten zusammensetzt
- Wenn Objekte, die aus verschiedenen Teilen zusammengesetzt werden, in unterschiedlichen Varianten vorkommen
- Applikationen die etwas von einem Format in ein anderes Format konvertieren

Fazit /  Potentielle Anwendungsfälle identifizieren :

- Wird bei meinet aktuell vorliegenden Problemstellung immer ein Objekt derselben Klasse benötigt ?
- Setzt sich dieses Objekt aus verschiedenen Teilen zusammen ?
- Ist der Konstruktor einer Klasse häufig überladen ?
- Soll etwas von einem Format in ein anderes Format konvertiert werden ?

Vorteile:

- Die Implementation der Konstruktion und der Repräsentation werden voneinander isoliert
- Neue Repräsentation neue ConcreteBuilder Klasse definieren
- Hilft, Anzahl der Parameter im Konstruktor zu minimieren , sodass keine Null für optionale Parameter an den Konstruktor übergeben werden muss
- Objekte die aus mehrere Teilen zusammengesetzt werden , werden dadurch immer in einem vollständigen Zustand instanziiert

Nachteile:

- Mehr Code erforderlich